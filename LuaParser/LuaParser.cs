
// LuaParser.cs - generated by the SLK parser generator 
using Dsl.Common;

namespace Dsl.Parser
{

    class LuaParser
    {

private static short[] Production = {0

,2,51,52 ,3,52,112,113 ,2,53,59 ,2,53,54 ,16,54,155,156,1,157,158,159,52,156,2,157,158,160,80,161,55 
,8,54,155,156,3,157,158,160,61 ,2,54,58 ,2,54,4 ,3,55,56,55 
,2,55,54 ,10,56,155,156,162,158,160,155,95,161,57 ,10,57,114,6,163,156,164,158,160,79,161 
,2,57,165 ,7,58,155,156,166,158,69,161 ,7,58,155,156,7,157,158,161 
,9,58,155,156,8,157,158,160,71,161 ,10,58,155,156,9,157,158,159,52,10,161 
,14,58,155,156,11,157,158,160,80,9,167,159,52,10,161 ,16,58,155,156,12,157,158,160,80,13,167,159,52,115,116,10,161 
,10,58,155,156,16,157,158,160,71,63,161 ,11,58,155,156,17,157,158,160,70,156,75,161 
,10,59,155,156,162,158,160,155,93,161,60 ,11,60,117,6,163,156,164,158,160,79,161,55 
,3,60,165,55 ,12,61,155,156,17,157,158,160,71,156,75,161,161 
,10,61,155,156,162,158,160,64,118,62,55 ,2,62,161 ,15,63,6,156,168,158,160,80,5,80,119,9,167,159,52,10 
,12,63,120,18,157,158,160,79,9,167,159,52,10 ,3,64,65,121 
,8,65,155,156,169,158,160,71,66 ,2,66,122 ,3,67,68,161 
,9,68,155,156,21,157,158,160,123,124 ,5,69,22,172,71,22 
,4,70,71,125,126 ,7,71,155,156,23,157,158,161 ,7,72,155,156,24,173,158,161 
,7,73,155,156,25,174,158,161 ,10,74,155,156,17,157,158,160,156,75,161 
,11,75,175,158,160,26,127,27,167,159,52,10 ,3,76,71,128 
,2,76,77 ,7,77,155,156,28,157,158,161 ,3,78,5,76 ,3,79,80,129 
,3,80,81,161 ,2,80,74 ,2,80,77 ,3,81,82,130 ,3,82,83,131 
,3,83,84,132 ,3,84,85,133 ,3,85,86,134 ,3,86,87,135 
,3,87,88,136 ,3,88,89,137 ,3,89,90,138 ,3,90,91,139 
,7,91,155,39,157,176,92,161 ,2,91,92 ,4,92,155,93,140 
,2,93,94 ,2,93,95 ,2,93,96 ,4,94,156,111,158 ,5,95,156,110,158,141 
,3,96,156,97 ,6,97,160,26,142,27,143 ,6,97,159,41,144,42,145 
,2,98,97 ,6,98,177,43,80,44,146 ,4,98,24,99,147 ,4,98,25,100,148 
,4,98,178,101,149 ,7,99,179,155,156,110,180,161 ,7,100,181,155,156,110,180,161 
,7,101,155,156,45,182,158,161 ,3,102,104,150 ,3,103,109,151 
,12,104,155,156,177,43,80,44,6,157,176,80,161 ,2,104,105 
,7,105,155,156,23,157,158,107 ,8,105,155,156,111,157,158,108,161 
,3,105,106,161 ,7,105,155,39,157,176,92,161 ,2,105,74 ,2,105,77 
,4,106,155,96,152 ,6,107,6,157,176,80,161 ,3,107,108,161 
,3,108,153,154 ,2,109,5 ,2,109,4 ,3,110,23,157 ,3,111,45,182 
,3,111,46,183 ,3,111,47,157 ,3,111,48,157 ,3,111,49,157 
,3,112,53,112 ,1,112 ,2,113,67 ,1,113 ,6,114,5,155,93,161,114 
,1,114 ,12,115,156,14,157,158,160,80,13,167,159,52,115 ,1,115 
,7,116,156,15,157,158,159,52 ,1,116 ,6,117,5,155,93,161,117 
,1,117 ,8,118,6,156,164,158,160,79,161 ,2,118,165 ,3,119,5,80 
,1,119 ,4,120,5,71,120 ,2,120,156 ,4,121,5,65,121 ,1,121 
,9,122,19,155,156,170,71,161,20,161 ,2,122,171 ,2,123,79 
,1,123 ,2,124,4 ,1,124 ,4,125,72,71,125 ,1,125 ,3,126,73,71 
,1,126 ,2,127,76 ,1,127 ,2,128,78 ,1,128 ,4,129,5,80,129 
,1,129 ,7,130,29,157,176,82,161,130 ,1,130 ,7,131,30,157,176,83,161,131 
,1,131 ,7,132,31,157,176,84,161,132 ,1,132 ,7,133,32,157,176,85,161,133 
,1,133 ,7,134,33,157,176,86,161,134 ,1,134 ,7,135,34,157,176,87,161,135 
,1,135 ,7,136,35,157,176,88,161,136 ,1,136 ,7,137,36,157,176,89,161,137 
,1,137 ,7,138,37,157,176,90,161,138 ,1,138 ,7,139,38,157,176,91,161,139 
,1,139 ,8,140,40,157,176,155,93,161,140 ,1,140 ,2,141,98 
,1,141 ,2,142,79 ,1,142 ,3,143,167,98 ,1,143 ,2,144,102 
,1,144 ,3,145,167,98 ,1,145 ,3,146,167,98 ,1,146 ,3,147,167,98 
,1,147 ,3,148,167,98 ,1,148 ,3,149,167,98 ,1,149 ,2,150,103 
,1,150 ,2,151,102 ,1,151 ,7,152,29,157,176,82,161,152 ,1,152 
,2,153,98 ,1,153 ,7,154,29,157,176,82,161,154 ,1,154 
,0};

private static int[] Production_row = {0

,1,4,8,11,14,31,40,43,46,50,53,64,75,78,86,94
,104,115,130,147,158,170,181,193,197,210,221,224,240,253,257,266
,269,273,283,289,294,302,310,318,329,341,345,348,356,360,364,368
,371,374,378,382,386,390,394,398,402,406,410,414,422,425,430,433
,436,439,444,450,454,461,468,471,478,483,488,493,501,509,517,521
,525,538,541,549,558,562,570,573,576,581,588,592,596,599,602,606
,610,614,618,622,626,630,632,635,637,644,646,659,661,669,671,678
,680,689,692,696,698,703,706,711,713,723,726,729,731,734,736,741
,743,747,749,752,754,757,759,764,766,774,776,784,786,794,796,804
,806,814,816,824,826,834,836,844,846,854,856,864,866,875,877,880
,882,885,887,891,893,896,898,902,904,908,910,914,916,920,922,926
,928,931,933,936,938,946,948,951,953,961
,0};

private static short[] Parse = {

0,0,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160
,80,80,94,93,160,160,159,159,159,160,11,160,160,160,160,160,160,160,160,160
,160,30,160,159,160,159,160,159,127,128,128,31,160,164,164,164,164,164,164,164
,164,164,164,164,164,164,164,164,164,164,105,106,111,112,164,164,163,163,163,164
,33,164,164,164,164,164,164,164,164,164,164,34,164,163,164,163,164,163,129,130
,133,35,164,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168
,36,37,134,38,168,168,167,167,167,168,39,168,168,168,168,168,168,168,168,168
,168,40,168,167,168,167,168,167,41,44,45,67,168,170,170,170,170,170,170,170
,170,170,170,170,170,170,170,170,170,170,76,77,78,95,170,170,169,169,169,170
,0,170,170,170,170,170,170,170,170,170,170,0,170,169,170,169,170,169,0,0
,0,0,170,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172
,0,0,0,0,172,172,171,171,171,172,0,172,172,172,172,172,172,172,172,172
,172,0,172,171,172,171,172,171,0,0,0,0,172,174,174,174,174,174,174,174
,174,174,174,174,174,174,174,174,174,174,0,0,0,0,174,174,173,173,173,174
,0,174,174,174,174,174,174,174,174,174,174,0,174,173,174,173,174,173,0,0
,0,0,174,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176
,177,177,0,0,176,176,175,175,175,176,0,176,176,176,176,176,176,176,176,176
,176,0,176,175,176,175,176,175,0,0,0,0,176,158,158,158,158,158,178,158
,158,158,158,158,158,158,158,158,158,158,0,0,108,42,158,158,107,108,43,158
,68,158,158,158,158,158,158,158,158,158,158,0,157,0,158,68,158,156,156,156
,156,156,158,156,156,156,156,156,156,156,156,156,156,156,0,0,131,0,156,156
,132,131,69,156,89,156,156,156,156,156,156,156,156,156,155,0,0,70,156,89
,156,154,154,154,154,154,156,154,154,154,154,154,154,154,154,154,154,154,25,0
,0,0,154,154,26,29,28,154,117,154,154,154,154,154,154,154,154,153,29,115
,0,118,154,116,154,152,152,152,152,152,154,152,152,152,152,152,152,152,152,152
,152,152,0,110,0,0,152,152,109,0,0,152,0,152,152,152,152,152,152,152
,151,66,66,66,66,66,152,0,152,150,150,150,150,150,152,150,150,150,150,150
,150,150,150,150,150,150,0,73,74,71,150,150,0,0,0,150,0,150,150,150
,150,150,150,149,71,0,72,0,75,0,150,0,150,148,148,148,148,148,150,148
,148,148,148,148,148,148,148,148,148,148,0,0,0,0,148,148,0,0,0,148
,0,148,148,148,148,148,147,96,97,98,99,100,182,182,148,0,148,146,146,146
,146,146,148,146,146,146,146,146,146,146,146,146,146,146,0,0,0,181,146,146
,0,0,0,146,0,146,146,146,146,145,182,0,0,0,0,186,186,0,146,0
,146,144,144,144,144,144,146,144,144,144,144,144,144,144,144,144,144,144,0,0
,185,0,144,144,0,0,126,144,125,144,144,144,143,186,126,0,0,0,126,126
,0,0,144,0,144,2,2,2,2,0,144,2,2,2,2,2,2,0,2,2
,2,2,0,0,0,2,2,2,0,0,2,15,16,17,126,18,19,0,0,0
,20,21,0,0,0,2,14,0,0,2,2,2,2,2,2,101,102,101,101,0
,0,101,101,101,102,101,101,0,102,102,101,101,0,0,104,102,101,101,0,0
,101,0,104,0,0,0,104,104,0,0,0,0,0,103,0,101,0,0,0,101
,101,101,101,101,102,142,142,142,142,142,0,142,142,142,142,142,142,142,142,142
,142,142,104,0,0,0,142,142,0,0,0,142,0,142,142,141,0,0,0,0
,0,0,0,0,0,0,142,0,142,140,140,140,140,140,142,140,140,140,140,140
,140,140,140,140,140,140,0,0,0,0,140,140,0,0,0,140,0,140,139,0
,0,0,0,0,0,0,0,0,0,0,140,0,140,138,138,138,138,138,140,138
,138,138,138,138,138,138,138,138,138,138,0,0,0,0,138,138,0,0,0,138
,0,137,0,0,0,0,0,0,0,91,91,90,0,0,138,0,138,1,0,1
,1,0,138,1,1,1,0,1,1,91,91,91,1,1,91,0,0,1,1,1
,0,0,1,0,0,0,91,91,91,0,91,0,0,0,0,0,0,1,0,92
,92,1,1,1,1,1,1,4,0,4,4,0,0,4,4,4,0,4,4,92
,92,92,4,4,92,0,0,0,4,3,0,0,3,0,0,0,92,92,92,0
,92,0,0,0,0,0,0,3,0,0,0,3,3,3,3,3,136,136,136,136
,135,0,136,136,136,136,136,136,0,136,136,136,136,124,0,124,0,136,136,0
,0,124,136,0,0,124,124,0,123,0,0,0,0,0,123,0,0,123,0,123
,0,0,0,0,0,136,0,0,0,0,123,0,123,0,0,0,123,123,123,123
,123,124,32,0,32,32,32,32,32,32,32,0,32,32,0,0,0,32,32,0
,32,0,0,32,32,122,0,122,122,122,122,122,122,122,0,122,122,0,0,0
,122,122,0,121,0,0,122,122,13,0,13,13,12,12,13,13,13,0,13,13
,0,0,0,13,13,0,0,0,0,13,13,24,0,24,24,23,23,24,24,24
,0,24,24,0,0,0,24,24,0,0,0,0,24,24,120,0,120,120,119,120
,120,120,120,0,120,120,0,0,0,120,120,0,0,0,0,120,120,114,0,114
,114,0,113,114,114,114,0,114,114,0,0,165,114,114,0,0,0,165,114,114
,165,0,165,179,0,0,0,0,0,179,0,0,179,165,179,165,166,165,0,165
,165,165,165,165,0,179,0,179,180,179,0,179,179,179,179,179,10,0,10,10
,0,0,10,10,10,0,10,10,0,0,0,10,10,27,0,27,27,10,9,27
,27,27,0,27,27,0,0,79,27,27,0,0,0,79,27,27,79,0,79,82
,0,0,0,0,0,82,0,0,82,79,82,79,0,79,0,79,79,79,79,79
,0,82,0,82,0,81,161,82,82,82,82,82,161,0,0,161,162,161,0,0
,0,0,0,0,0,0,0,0,161,0,161,0,0,0,161,161,161,161,161,5
,0,6,8,0,0,7,7,7,0,7,7,0,46,0,7,7,0,0,46,0
,7,46,0,46,48,0,0,0,0,0,47,0,0,47,46,49,46,0,0,0
,46,46,46,46,46,0,47,0,47,184,184,87,47,47,47,47,47,83,0,0
,85,0,88,0,0,0,0,0,0,183,183,183,0,86,184,85,0,0,0,84
,84,84,84,84,0,0,183,184,183,50,183,0,50,0,0,0,0,0,0,0
,51,0,0,51,0,50,0,50,0,0,0,50,50,50,50,50,51,52,51,0
,52,0,51,51,51,51,51,0,53,0,0,53,0,52,0,52,0,0,0,52
,52,52,52,52,53,54,53,0,54,0,53,53,53,53,53,0,55,0,0,55
,0,54,0,54,0,0,0,54,54,54,54,54,55,56,55,0,56,0,55,55
,55,55,55,0,57,0,0,57,0,56,0,56,0,0,0,56,56,56,56,56
,57,58,57,0,58,0,57,57,57,57,57,0,59,0,0,59,0,58,0,58
,0,0,0,58,58,58,58,58,59,61,59,0,61,0,59,59,59,59,59,22
,0,0,22,0,0,60,0,61,0,0,0,61,61,61,61,61,62,22,0,62
,0,22,22,22,22,22,64,0,0,65,0,0,0,0,62,0,0,0,62,62
,62,62,62,0,65,0,0,0,63,63,63,63,63,0
};

private static int[] Parse_row = {0

,935,703,985,1377,1274,6,1146,723,1595,1169,440,1291,459,17,27,1100
,58,69,78,96,97,98,104,123,121,349,120,144,1374,1386,1445,1456
,1473,1484,1501,1512,1529,1540,1557,1568,1585,1612,1622,475,127,353,395,522
,146,147,126,1289,15,1301,1413,397,924,974,17,149,561,753,771,64
,361,492,66,1215,473,462,1192,1123,1050,683,23,72,392,94,1034,891
,847,803,659,615,571,527,483,439,395,351,1,1328,51,1213,101,151
,201,251,301,315,1225,607,1424,650
,0};

private static short[] Conflict = {

0
};

private static int[] Conflict_row = {0


,0};

private static short get_conditional_production ( short symbol ) { return (short) 0; }

private const short   END_OF_SLK_INPUT_ = 50;
private const short   START_SYMBOL = 51;
private const short   START_STATE = 0;
private const short   START_CONFLICT = 187;
private const short   END_CONFLICT = 187;
private const short   START_ACTION = 155;
private const short   END_ACTION = 184;
private const short   TOTAL_CONFLICTS = 0;

public const int   NOT_A_SYMBOL = 0;
public const int   NONTERMINAL_SYMBOL = 1;
public const int   TERMINAL_SYMBOL = 2;
public const int   ACTION_SYMBOL = 3;

public static short[]
GetProductionArray ( short  production_number )
{
   short   index = (short)  Production_row [ production_number ],
           array_length = (short)  Production [ index ],
           new_index = 0;
   short[] productionArray = new short[39];        

   while ( array_length-- >= 0 ) {
       productionArray [ new_index++ ] = Production [ index++ ];
   }
   return  productionArray;
}

public static int GetSymbolType ( short   symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_ACTION  &&  symbol < END_ACTION ) {
       symbol_type = ACTION_SYMBOL;
   } else if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0 ) {
       symbol_type = TERMINAL_SYMBOL;
   }
   return  symbol_type;
}

public static bool    IsNonterminal ( short   symbol )
{
   return ( symbol >= START_SYMBOL  &&  symbol < START_ACTION );
}

public static bool    IsTerminal ( short   symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

public static bool    IsAction ( short   symbol )
{
   return ( symbol >= START_ACTION  &&  symbol < END_ACTION );
}

public static short GetTerminalIndex ( short   token ){
 return ( token );
}

public static short
get_production ( short     conflict_number,
                 LuaToken  tokens )
{
    short   entry = 0;
    int     index, level;

    if ( conflict_number <= TOTAL_CONFLICTS ) {
        entry = (short) ( conflict_number + (START_CONFLICT - 1) );
        level = 1;
        while ( entry >= START_CONFLICT ) {
            index = Conflict_row [entry - (START_CONFLICT -1)];
            index += tokens.peek ( level );
            entry = Conflict [ index ];
            ++level;
        }
    }

    return  entry;
}

private static short
get_predicted_entry ( LuaToken   tokens,
                      short      production_number,
                      short      token,
                      int        scan_level,
                      int        depth )
{
 return  0;
}

        internal unsafe static void
        parse(ref DslAction action,
                ref LuaToken tokens,
                ref LuaError error,
                short start_symbol)
        {
            short rhs, lhs;
            short production_number, entry, symbol, token, new_token;
            int production_length, top, index, level;

            short* stack = stackalloc short[65535];

            top = 65534;
            stack[top] = 0;
            if (start_symbol == 0) {
                start_symbol = START_SYMBOL;
            }
            if (top > 0) {
                stack[--top] = start_symbol;
            }
            else { error.message("LuaParse: stack overflow\n", ref tokens); return; }
            token = tokens.get();
            new_token = token;

            for (symbol = (stack[top] != 0 ? stack[top++] : (short)0); symbol != 0;) {

                if (symbol >= START_ACTION) {
                    action.execute(symbol - (START_ACTION - 1));

                }
                else if (symbol >= START_SYMBOL) {
                    entry = 0;
                    level = 1;
                    production_number = get_conditional_production(symbol);
                    if (production_number != 0) {
                        entry = get_predicted_entry(tokens,
                                                      production_number, token,
                                                      level, 1);
                    }
                    if (entry == 0) {
                        index = Parse_row[symbol - (START_SYMBOL - 1)];
                        index += token;
                        entry = Parse[index];
                    }
                    while (entry >= START_CONFLICT) {
                        index = Conflict_row[entry - (START_CONFLICT - 1)];
                        index += tokens.peek(level);
                        entry = Conflict[index];
                        ++level;
                    }
                    if (entry != 0) {
                        index = Production_row[entry];
                        production_length = Production[index] - 1;
                        lhs = Production[++index];

                        if (lhs == symbol) {
                            action.predict(entry, token, tokens.getLastToken(), tokens.getLastLineNumber(), tokens.getCurToken(), tokens.getLineNumber());
                            index += production_length;
                            for (; production_length-- > 0; --index) {
                                if (top > 0) {
                                    stack[--top] = Production[index];
                                }
                                else { error.message("LuaParse: stack overflow\n", ref tokens); return; }
                            }
                        }
                        else {
                            action.predict(entry, token, tokens.getLastToken(), tokens.getLastLineNumber(), tokens.getCurToken(), tokens.getLineNumber());
                            new_token = error.no_entry(symbol, token, level - 1, ref tokens);
                        }
                    }
                    else {
                        action.predict(entry, token, tokens.getLastToken(), tokens.getLastLineNumber(), tokens.getCurToken(), tokens.getLineNumber());
                        new_token = error.no_entry(symbol, token, level - 1, ref tokens);
                    }
                }
                else if (symbol > 0) {
                    if (symbol == token) {
                        token = tokens.get();
                        new_token = token;
                    }
                    else {
                        new_token = error.mismatch(symbol, token, ref tokens);
                    }
                }
                else {
                    error.message("\n parser error: symbol value 0\n", ref tokens);
                }
                if (token != new_token) {
                    if (new_token != 0) {
                        token = new_token;
                    }
                    if (token != END_OF_SLK_INPUT_) {
                        continue;
                    }
                }
                symbol = (stack[top] != 0 ? stack[top++] : (short)0);
            }
            if (token != END_OF_SLK_INPUT_) {
                error.input_left(ref tokens);
            }
        }
    };
}
